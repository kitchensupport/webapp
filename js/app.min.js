(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var getNative = require('lodash._getnative');

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Native method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeNow = getNative(Date, 'now');

/**
 * Gets the number of milliseconds that have elapsed since the Unix epoch
 * (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @category Date
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => logs the number of milliseconds it took for the deferred function to be invoked
 */
var now = nativeNow || function() {
  return new Date().getTime();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed invocations. Provide an options object to indicate that `func`
 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
 * Subsequent calls to the debounced function return the result of the last
 * `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
 * on the trailing edge of the timeout only if the the debounced function is
 * invoked more than once during the `wait` timeout.
 *
 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.leading=false] Specify invoking on the leading
 *  edge of the timeout.
 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
 *  delayed before it is invoked.
 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
 *  edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // avoid costly calculations while the window size is in flux
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // ensure `batchLog` is invoked once after 1 second of debounced calls
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', _.debounce(batchLog, 250, {
 *   'maxWait': 1000
 * }));
 *
 * // cancel a debounced call
 * var todoChanges = _.debounce(batchLog, 1000);
 * Object.observe(models.todo, todoChanges);
 *
 * Object.observe(models, function(changes) {
 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
 *     todoChanges.cancel();
 *   }
 * }, ['delete']);
 *
 * // ...at some point `models.todo` is changed
 * models.todo.completed = true;
 *
 * // ...before 1 second has passed `models.todo` is deleted
 * // which cancels the debounced `todoChanges` call
 * delete models.todo;
 */
function debounce(func, wait, options) {
  var args,
      maxTimeoutId,
      result,
      stamp,
      thisArg,
      timeoutId,
      trailingCall,
      lastCalled = 0,
      maxWait = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = wait < 0 ? 0 : (+wait || 0);
  if (options === true) {
    var leading = true;
    trailing = false;
  } else if (isObject(options)) {
    leading = !!options.leading;
    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    if (maxTimeoutId) {
      clearTimeout(maxTimeoutId);
    }
    lastCalled = 0;
    maxTimeoutId = timeoutId = trailingCall = undefined;
  }

  function complete(isCalled, id) {
    if (id) {
      clearTimeout(id);
    }
    maxTimeoutId = timeoutId = trailingCall = undefined;
    if (isCalled) {
      lastCalled = now();
      result = func.apply(thisArg, args);
      if (!timeoutId && !maxTimeoutId) {
        args = thisArg = undefined;
      }
    }
  }

  function delayed() {
    var remaining = wait - (now() - stamp);
    if (remaining <= 0 || remaining > wait) {
      complete(trailingCall, maxTimeoutId);
    } else {
      timeoutId = setTimeout(delayed, remaining);
    }
  }

  function maxDelayed() {
    complete(trailing, timeoutId);
  }

  function debounced() {
    args = arguments;
    stamp = now();
    thisArg = this;
    trailingCall = trailing && (timeoutId || !leading);

    if (maxWait === false) {
      var leadingCall = leading && !timeoutId;
    } else {
      if (!maxTimeoutId && !leading) {
        lastCalled = stamp;
      }
      var remaining = maxWait - (stamp - lastCalled),
          isCalled = remaining <= 0 || remaining > maxWait;

      if (isCalled) {
        if (maxTimeoutId) {
          maxTimeoutId = clearTimeout(maxTimeoutId);
        }
        lastCalled = stamp;
        result = func.apply(thisArg, args);
      }
      else if (!maxTimeoutId) {
        maxTimeoutId = setTimeout(maxDelayed, remaining);
      }
    }
    if (isCalled && timeoutId) {
      timeoutId = clearTimeout(timeoutId);
    }
    else if (!timeoutId && wait !== maxWait) {
      timeoutId = setTimeout(delayed, wait);
    }
    if (leadingCall) {
      isCalled = true;
      result = func.apply(thisArg, args);
    }
    if (isCalled && !timeoutId && !maxTimeoutId) {
      args = thisArg = undefined;
    }
    return result;
  }
  debounced.cancel = cancel;
  return debounced;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = debounce;

},{"lodash._getnative":2}],2:[function(require,module,exports){
/**
 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var funcTag = '[object Function]';

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in older versions of Chrome and Safari which return 'function' for regexes
  // and Safari 8 equivalents which return 'object' for typed array constructors.
  return isObject(value) && objToString.call(value) == funcTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(fnToString.call(value));
  }
  return isObjectLike(value) && reIsHostCtor.test(value);
}

module.exports = getNative;

},{}],3:[function(require,module,exports){
'use strict';

require('./bootstrap');

require('./routes');

require('./services');

require('./controllers');

require('./directives');

},{"./bootstrap":4,"./controllers":19,"./directives":24,"./routes":25,"./services":29}],4:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _angular = (typeof window !== "undefined" ? window['angular'] : typeof global !== "undefined" ? global['angular'] : null);

var _angular2 = _interopRequireDefault(_angular);

var _utilsConstants = require('./utils/constants');

var app = _angular2['default'].module(_utilsConstants.appName, ['ngMaterial', 'ngMessages', 'ngCookies', 'ngStorage', 'ui.router']);
exports.app = app;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./utils/constants":30}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function AccountController($scope) {

    // Require user authentication.
    $scope.auth = $scope.auth || {};
    $scope.auth.required = true;
}

exports['default'] = ['$scope', AccountController];
module.exports = exports['default'];

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function FooterController() {}

exports["default"] = [FooterController];
module.exports = exports["default"];

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function HeaderController($scope) {
    $scope.openMenu = function ($mdOpenMenu, ev) {
        $mdOpenMenu(ev);
    };
}

exports['default'] = ['$scope', HeaderController];
module.exports = exports['default'];

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function HomeController() {}

exports["default"] = [HomeController];
module.exports = exports["default"];

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function LoginController($scope, $rootScope, $http, $state, $mdDialog, AuthService) {
    $scope.loginSubmitting = false;

    $scope.login = function () {
        $scope.loginSubmitting = true;
        $scope.loginForm = { general: {}, email: {}, password: {} };

        // Do some simple input validation.
        if (!$scope.account) {
            $scope.loginForm.general['no-input'] = true;
            $scope.loginSubmitting = false;
            return;
        } else if (!$scope.account.password || $scope.account.password.length === 0) {
            $scope.loginForm.password.required = true;
            $scope.loginSubmitting = false;
            return;
        }

        AuthService.login({ email: $scope.account.email, password: $scope.account.password, remember: $scope.account.remember }).then(function () {
            if (!AuthService.loginModal.isOpen()) {
                $state.go('home');
            } else {

                // If we're logging in through the modal, don't redirect.
                AuthService.loginModal.close();
            }
        })['catch'](function () {
            $scope.loginForm.general.incorrect = true;
        })['finally'](function () {
            $scope.loginSubmitting = false;
        });
    };

    $scope.openLoginModal = function ($event) {
        AuthService.loginModal.open($event);
    };

    $scope.closeLoginModal = function () {
        AuthService.loginModal.close();
    };
}

exports['default'] = ['$scope', '$rootScope', '$http', '$state', '$mdDialog', 'AuthService', LoginController];
module.exports = exports['default'];

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function MainController($rootScope, $localStorage, $sessionStorage, AuthService) {
    $rootScope.modals = {};
    $rootScope.auth = {};
    $rootScope.auth.logout = AuthService.logout;

    $rootScope.$on('$stateChangeStart', function () {
        $rootScope.auth.required = false;
    });

    // Check to see if there's a token in storage somewhere.
    if (!AuthService.getCurrentUser()) {
        if ($localStorage.ksLoginToken !== undefined && $localStorage.ksLoginToken !== 'undefined') {
            AuthService.login({ api_token: $localStorage.ksLoginToken });
        } else if ($sessionStorage.ksLoginToken !== undefined && $sessionStorage.ksLoginToken !== 'undefined') {
            AuthService.login({ api_token: $sessionStorage.ksLoginToken });
        }
    }

    // Update the scope whenever user information changes.
    $rootScope.$watch(AuthService.getCurrentUser, function (user) {
        $rootScope.auth.user = user;
    });
}

exports['default'] = ['$rootScope', '$localStorage', '$sessionStorage', 'AuthService', MainController];
module.exports = exports['default'];

},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashDebounce = require('lodash.debounce');

var _lodashDebounce2 = _interopRequireDefault(_lodashDebounce);

function MyIngredientsController($rootScope, $scope, IngredientService) {

    // Require user authentication.
    $rootScope.auth = $rootScope.auth || {};
    $rootScope.auth.required = true;

    var ingredientsPerPage = 15;

    $scope.searchedIngredients = { status: -1 };
    $scope.pantry = { status: -1, data: {} };

    function parsePagination(data, limit, offset) {
        var page = {
            buttons: [],
            pageCount: Math.ceil(data.matches / limit),
            currPage: Math.ceil(offset / limit)
        };

        for (var i = 0; i < page.pageCount; i++) {
            if (i === page.currPage) {
                page.buttons[i] = 'disabled';
            } else {
                page.buttons[i] = 'enabled';
            }
        }

        return page;
    }

    $scope.$watch('search.term', (0, _lodashDebounce2['default'])(function (term) {
        $scope.getIngredients(0, term);
    }, 350));

    $scope.getIngredients = function () {
        var page = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
        var searchTerm = arguments.length <= 1 || arguments[1] === undefined ? '%20' : arguments[1];

        var term = searchTerm;

        if (!term || term.length === 0) {
            term = '%20';
        }

        var offset = page * ingredientsPerPage;

        IngredientService.getSearch({ searchTerm: term, offset: offset }).then(function (response) {
            $scope.searchedIngredients = response;
            $scope.searchedIngredients.pagination = parsePagination(response.data, ingredientsPerPage, offset);
            return true;
        }, function () {
            $scope.searchedIngredients.status = 500;
            return false;
        });
    };

    $scope.getPantry = function () {
        $scope.pantry = { status: -1, data: {} };

        IngredientService.getPantry().then(function (response) {
            $scope.pantry = response;
            console.log(response);
        })['catch'](function (err) {
            console.log('Error getting pantry: ' + JSON.stringify(err));
        });
    };

    $scope.addPantry = function (id) {
        IngredientService.addPantry(id).then(function () {
            $scope.getPantry();
        })['catch'](function (err) {
            console.log('Error adding ingredient: ' + JSON.stringify(err));
        });
    };

    $scope.removePantry = function (id) {
        IngredientService.removePantry(id).then(function () {
            $scope.getPantry();
        })['catch'](function (err) {
            console.log('Error removing ingredient: ' + JSON.stringify(err));
        });
    };

    $scope.nextPageIngredients = function () {
        console.log($scope.ingredients);
        var limit = +$scope.ingredients.data.params.limit;
        var offset = +$scope.ingredients.data.params.offset + limit;
        var params = { limit: limit, offset: offset };

        $scope.getIngredients(params);
    };

    $scope.previousPageIngredients = function () {
        console.log($scope.ingredients);
        var limit = +$scope.ingredients.data.params.limit;
        var offset = +$scope.ingredients.data.params.offset - limit;

        if (offset < 0) {
            offset = 0;
        }

        var params = { limit: limit, offset: offset };

        $scope.getIngredients(params);
    };
}

exports['default'] = ['$rootScope', '$scope', 'IngredientService', MyIngredientsController];
module.exports = exports['default'];

},{"lodash.debounce":1}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function MyRecipesController($rootScope, $scope, RecipeService) {

    // Require user authentication.
    $rootScope.auth = $rootScope.auth || {};
    $rootScope.auth.required = true;

    $scope.getLikedRecipes = function () {
        if ($scope.likedRecipes && $scope.likedRecipes.status === 200) {
            return true;
        }

        $scope.likedRecipes = { status: -1, data: {} };

        RecipeService.getLiked().then(function (response) {
            $scope.likedRecipes = response;
            return true;
        }, function () {
            $scope.likedRecipes.status = 500;
            return false;
        });
    };

    $scope.getFavoritedRecipes = function () {
        if ($scope.favoritedRecipes && $scope.favoritedRecipes.status === 200) {
            return true;
        }

        $scope.favoritedRecipes = { status: -1, data: {} };

        RecipeService.getFavorited().then(function (response) {
            $scope.favoritedRecipes = response;
            return true;
        }, function () {
            $scope.favoritedRecipes.status = 500;
            return false;
        });
    };

    $scope.getCompletedRecipes = function () {
        if ($scope.completedRecipes && $scope.completedRecipes.status === 200) {
            return true;
        }

        $scope.completedRecipes = { status: -1, data: {} };

        RecipeService.getCompleted().then(function (response) {
            $scope.completedRecipes = response;
            return true;
        }, function () {
            $scope.completedRecipes.status = 500;
            return false;
        });
    };
}

exports['default'] = ['$rootScope', '$scope', 'RecipeService', MyRecipesController];
module.exports = exports['default'];

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashDebounce = require('lodash.debounce');

var _lodashDebounce2 = _interopRequireDefault(_lodashDebounce);

function RecipeController($scope, RecipeService) {
    var _this = this;

    var recipesPerPage = 28;

    $scope.searchedRecipes = { status: -1 };

    function parsePagination(data, limit, offset) {
        var page = {
            buttons: [],
            pageCount: Math.ceil(data.matches / limit),
            currPage: Math.ceil(offset / limit)
        };

        for (var i = 0; i < page.pageCount; i++) {
            if (i === page.currPage) {
                page.buttons[i] = 'disabled';
            } else {
                page.buttons[i] = 'enabled';
            }
        }

        return page;
    }

    $scope.$watch('search.term', (0, _lodashDebounce2['default'])(function (term) {
        _this.getRecipes(0, term);
    }, 350));

    this.getRecipes = function () {
        var page = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
        var searchTerm = arguments.length <= 1 || arguments[1] === undefined ? '%20' : arguments[1];

        var term = searchTerm;

        if (!term || term.length === 0) {
            term = '%20';
        }

        var offset = page * recipesPerPage;

        RecipeService.getSearch({ searchTerm: term, offset: offset }).then(function (response) {
            $scope.searchedRecipes = response;
            $scope.searchedRecipes.pagination = parsePagination(response.data, recipesPerPage, offset);
            return true;
        }, function () {
            $scope.searchedRecipes.status = 500;
            return false;
        });
    };

    $scope.getStars = function (numStars) {
        var stars = [true, true, false];

        for (var i = 0; i < numStars; i++) {
            stars.push(true);
        }
        for (var i = numStars; i < 5; i++) {
            stars.push(false);
        }
        return stars;
    };
}

exports['default'] = ['$scope', 'RecipeService', RecipeController];
module.exports = exports['default'];

},{"lodash.debounce":1}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function RecipeStreamController($rootScope, $scope, RecipeService) {

    // Require user authentication.
    $rootScope.auth = $rootScope.auth || {};
    $rootScope.auth.required = true;

    $scope.$watch('recipeStream.currentIndex', function () {
        if ($scope.recipeStream.currentIndex > -1 && $scope.recipeStream.currentIndex < $scope.recipeStream.data.recipes.length) {
            $scope.recipeStream.current = $scope.recipeStream.data.recipes[$scope.recipeStream.currentIndex].id;
        } else {
            $scope.recipeStream.current = -1;
        }
    });

    $scope.getRecipeStream = function () {
        if ($scope.recipeStream && $scope.recipeStream.status === 200) {
            return true;
        }

        $scope.recipeStream = { status: -1, data: {} };
        RecipeService.getRecipeStream().then(function (response) {
            console.log(response);
            $scope.recipeStream = response;
            $scope.recipeStream.currentIndex = -1;

            // Trigger a variable change.
            $scope.recipeStream.currentIndex++;
            return true;
        }, function () {
            $scope.recipeStream.status = 500;
            return false;
        });
    };

    $scope.likeRecipe = function (id) {
        RecipeService.likeRecipe(id).then(function () {
            return true;
        }, function (err) {
            console.log('Error liking recipe: ' + JSON.stringify(err));
            return false;
        });
        $scope.recipeStream.currentIndex++;
    };

    $scope.dislikeRecipe = function (id) {
        console.log(id);
        $scope.recipeStream.currentIndex++;
    };
}

exports['default'] = ['$rootScope', '$scope', 'RecipeService', RecipeStreamController];
module.exports = exports['default'];

},{}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function RecipeViewController($scope, $state, $stateParams, RecipeService) {
    $scope.getRecipe = function () {
        var recipeId = $stateParams.recipeId;

        $scope.recipe = { status: -1, data: {} };

        RecipeService.getRecipe(recipeId).then(function (response) {
            $scope.recipe.status = response.status;
            $scope.recipe.data = response.data;

            return response;
        })['catch'](function () {
            $scope.recipe.status = 500;
        });
    };

    $scope.favoriteRecipe = function () {
        $scope.recipe.data.favoritedLoading = true;
        RecipeService.favoriteRecipe($scope.recipe.data.id).then(function () {
            $scope.recipe.data.favorited = true;
        })['catch'](function (err) {
            console.log('Error favoriting recipe: ' + JSON.stringify(err));
        })['finally'](function () {
            $scope.recipe.data.favoritedLoading = false;
        });
    };

    $scope.markCompleted = function () {
        $scope.recipe.data.completedLoading = true;
        RecipeService.completeRecipe($scope.recipe.data.id).then(function () {
            $scope.recipe.data.completed = true;
        })['catch'](function (err) {
            console.log('Error completing recipe: ' + JSON.stringify(err));
        })['finally'](function () {
            $scope.recipe.data.completedLoading = false;
        });
    };

    $scope.markUnCompleted = function () {
        $scope.recipe.data.completedLoading = true;
        RecipeService.unCompleteRecipe($scope.recipe.data.id).then(function () {
            $scope.recipe.data.completed = false;
        })['catch'](function (err) {
            console.log('Error un-completed recipe: ' + JSON.stringify(err));
        })['finally'](function () {
            $scope.recipe.data.completedLoading = false;
        });
    };

    $scope.unFavoriteRecipe = function () {
        $scope.recipe.data.favoritedLoading = true;
        RecipeService.unFavoriteRecipe($scope.recipe.data.id).then(function () {
            $scope.recipe.data.favorited = false;
        })['catch'](function (err) {
            console.log('Error un-favoriting recipe: ' + JSON.stringify(err));
        })['finally'](function () {
            $scope.recipe.data.favoritedLoading = false;
        });
    };
}

exports['default'] = ['$scope', '$state', '$stateParams', 'RecipeService', RecipeViewController];
module.exports = exports['default'];

},{}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function RecoveryController($scope, AuthService) {
    $scope.recoverSubmitting = false;
    $scope.recoverFormSuccess = false;

    $scope.sendRecoveryToken = function () {
        $scope.recoverForm = { general: {}, email: {} };
        $scope.recoverSubmitting = true;

        // Do some simple input validation.
        if (!$scope.account) {
            $scope.recoverForm.email.required = true;
            $scope.recoverSubmitting = false;
            return;
        }

        AuthService.forgotPassword($scope.account.email).then(function () {
            $scope.recoverFormSuccess = true;
            $scope.recoverSubmitting = false;
        })['catch'](function () {
            $scope.recoverForm.general.issue = true;
            $scope.recoverSubmitting = false;
        });
    };
}

exports['default'] = ['$scope', 'AuthService', RecoveryController];
module.exports = exports['default'];

},{}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function RecoveryNewPasswordController($scope, $state, $stateParams, AuthService) {
    $scope.recoverSubmitting = false;
    $scope.recoverTokenValid = true;

    $scope.changePassword = function () {
        $scope.recoverForm = { general: {}, password: {}, confirm: {} };
        $scope.recoverSubmitting = true;

        // Do some simple input validation.
        if (!$scope.account || !$scope.account.password || $scope.account.password.length === 0) {
            $scope.recoverForm.password.required = true;
            $scope.recoverSubmitting = false;
            return;
        } else if ($scope.account.password !== $scope.account.confirm) {
            $scope.recoverForm.confirm.mismatch = true;
            $scope.recoverSubmitting = false;
            return;
        }

        AuthService.forgotPasswordConfirm($stateParams.token, $scope.account.password).then(function () {
            $scope.recoverSubmitting = false;

            // Redirect to homepage after recovering.
            $state.go('home');
        })['catch'](function () {
            $scope.recoverForm.general.issue = true;
            $scope.recoverSubmitting = false;
        });
    };
}

exports['default'] = ['$scope', '$state', '$stateParams', 'AuthService', RecoveryNewPasswordController];
module.exports = exports['default'];

},{}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function RegistrationController($scope, $cookies, $state, AuthService) {
    $scope.registerSubmitting = false;

    $scope.register = function () {
        $scope.registerForm = { general: {}, email: {}, password: {}, confirm: {} };
        $scope.registerSubmitting = true;

        // Do some simple input validation.
        if (!$scope.account) {
            $scope.registerForm.general['no-input'] = true;
            $scope.registerSubmitting = false;
            return;
        } else if (!$scope.account.password || $scope.account.password.length === 0) {
            $scope.registerForm.password.required = true;
            $scope.registerSubmitting = false;
            return;
        } else if ($scope.account.password !== $scope.account.confirm) {
            $scope.registerForm.confirm.mismatch = true;
            $scope.registerSubmitting = false;
            return;
        }

        AuthService.register($scope.account.email, $scope.account.password).then(function (response) {

            // Log the user in.
            AuthService.login({ api_token: response.data.api_token }).then(function () {
                $state.go('home');
            });
        })['catch'](function () {
            $scope.registerForm.email.taken = true;
            $scope.registerSubmitting = false;
        });
    };
}

exports['default'] = ['$scope', '$cookies', '$state', 'AuthService', RegistrationController];
module.exports = exports['default'];

},{}],19:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _bootstrap = require('../bootstrap');

var _MainController = require('./MainController');

var _MainController2 = _interopRequireDefault(_MainController);

var _HeaderController = require('./HeaderController');

var _HeaderController2 = _interopRequireDefault(_HeaderController);

var _FooterController = require('./FooterController');

var _FooterController2 = _interopRequireDefault(_FooterController);

var _HomeController = require('./HomeController');

var _HomeController2 = _interopRequireDefault(_HomeController);

var _LoginController = require('./LoginController');

var _LoginController2 = _interopRequireDefault(_LoginController);

var _AccountController = require('./AccountController');

var _AccountController2 = _interopRequireDefault(_AccountController);

var _MyRecipesController = require('./MyRecipesController');

var _MyRecipesController2 = _interopRequireDefault(_MyRecipesController);

var _MyIngredientsController = require('./MyIngredientsController');

var _MyIngredientsController2 = _interopRequireDefault(_MyIngredientsController);

var _RegistrationController = require('./RegistrationController');

var _RegistrationController2 = _interopRequireDefault(_RegistrationController);

var _RecoveryController = require('./RecoveryController');

var _RecoveryController2 = _interopRequireDefault(_RecoveryController);

var _RecoveryNewPasswordController = require('./RecoveryNewPasswordController');

var _RecoveryNewPasswordController2 = _interopRequireDefault(_RecoveryNewPasswordController);

var _RecipeController = require('./RecipeController');

var _RecipeController2 = _interopRequireDefault(_RecipeController);

var _RecipeViewController = require('./RecipeViewController');

var _RecipeViewController2 = _interopRequireDefault(_RecipeViewController);

var _RecipeStreamController = require('./RecipeStreamController');

var _RecipeStreamController2 = _interopRequireDefault(_RecipeStreamController);

_bootstrap.app.controller('MainController', _MainController2['default']);
_bootstrap.app.controller('HeaderController', _HeaderController2['default']);
_bootstrap.app.controller('FooterController', _FooterController2['default']);
_bootstrap.app.controller('HomeController', _HomeController2['default']);
_bootstrap.app.controller('LoginController', _LoginController2['default']);
_bootstrap.app.controller('AccountController', _AccountController2['default']);
_bootstrap.app.controller('MyRecipesController', _MyRecipesController2['default']);
_bootstrap.app.controller('MyIngredientsController', _MyIngredientsController2['default']);
_bootstrap.app.controller('RegistrationController', _RegistrationController2['default']);
_bootstrap.app.controller('RecoveryController', _RecoveryController2['default']);
_bootstrap.app.controller('RecoveryNewPasswordController', _RecoveryNewPasswordController2['default']);
_bootstrap.app.controller('RecipeController', _RecipeController2['default']);
_bootstrap.app.controller('RecipeViewController', _RecipeViewController2['default']);
_bootstrap.app.controller('RecipeStreamController', _RecipeStreamController2['default']);

},{"../bootstrap":4,"./AccountController":5,"./FooterController":6,"./HeaderController":7,"./HomeController":8,"./LoginController":9,"./MainController":10,"./MyIngredientsController":11,"./MyRecipesController":12,"./RecipeController":13,"./RecipeStreamController":14,"./RecipeViewController":15,"./RecoveryController":16,"./RecoveryNewPasswordController":17,"./RegistrationController":18}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function FooterDirective() {
    return {
        templateUrl: 'templates/partials/footer.html',
        scope: true,
        controller: 'FooterController'
    };
}

exports['default'] = [FooterDirective];
module.exports = exports['default'];

},{}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function HeaderDirective() {
    return {
        templateUrl: 'templates/partials/header.html',
        scope: true,
        controller: 'HeaderController'
    };
}

exports['default'] = [HeaderDirective];
module.exports = exports['default'];

},{}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.search = search;
exports.preview = preview;
exports.view = view;
exports.liked = liked;
exports.completed = completed;
exports.favorited = favorited;

function search() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-search.html',
        scope: {
            searchTerm: '@'
        },
        controller: 'RecipeController',
        controllerAs: 'recipe'
    };
}

function preview() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-preview.html',
        scope: true,
        link: function link(scope, element, attributes) {
            scope.recipe = JSON.parse(attributes.recipeData);
        }
    };
}

function view() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-view.html',
        controller: 'RecipeViewController'
    };
}

function liked() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-liked.html',
        scope: true,
        controller: 'MyRecipesController'
    };
}

function completed() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-completed.html',
        scope: true,
        controller: 'MyRecipesController'
    };
}

function favorited() {
    return {
        templateUrl: 'templates/partials/recipe/recipe-favorited.html',
        scope: true,
        controller: 'MyRecipesController'
    };
}

},{}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function UnauthorizedDirective() {
    return {
        templateUrl: 'templates/partials/unauthorized.html',
        scope: true
    };
}

exports['default'] = [UnauthorizedDirective];
module.exports = exports['default'];

},{}],24:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _bootstrap = require('../bootstrap');

var _HeaderDirective = require('./HeaderDirective');

var _HeaderDirective2 = _interopRequireDefault(_HeaderDirective);

var _FooterDirective = require('./FooterDirective');

var _FooterDirective2 = _interopRequireDefault(_FooterDirective);

var _UnauthorizedDirective = require('./UnauthorizedDirective');

var _UnauthorizedDirective2 = _interopRequireDefault(_UnauthorizedDirective);

var _RecipeDirective = require('./RecipeDirective');

_bootstrap.app.directive('header', _HeaderDirective2['default']);
_bootstrap.app.directive('footer', _FooterDirective2['default']);
_bootstrap.app.directive('unauthorized', _UnauthorizedDirective2['default']);
_bootstrap.app.directive('recipepreview', _RecipeDirective.preview);
_bootstrap.app.directive('recipesearch', _RecipeDirective.search);
_bootstrap.app.directive('recipeview', _RecipeDirective.view);
_bootstrap.app.directive('recipesliked', _RecipeDirective.liked);
_bootstrap.app.directive('recipescompleted', _RecipeDirective.completed);
_bootstrap.app.directive('recipesfavorited', _RecipeDirective.favorited);

},{"../bootstrap":4,"./FooterDirective":20,"./HeaderDirective":21,"./RecipeDirective":22,"./UnauthorizedDirective":23}],25:[function(require,module,exports){
'use strict';

var _bootstrap = require('./bootstrap');

_bootstrap.app.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');

    $stateProvider.state('home', {
        url: '/',
        templateUrl: 'templates/home.html',
        controller: 'HomeController'
    }).state('account', {
        url: '/account/',
        templateUrl: 'templates/account.html',
        controller: 'AccountController'
    }).state('my-recipes', {
        url: '/account/recipes/',
        templateUrl: 'templates/my-recipes.html',
        controller: 'MyRecipesController'
    }).state('my-ingredients', {
        url: '/account/ingredients/',
        templateUrl: 'templates/my-ingredients.html',
        controller: 'MyIngredientsController'
    }).state('register', {
        url: '/register/',
        templateUrl: 'templates/register.html',
        controller: 'RegistrationController'
    }).state('forgot-password', {
        url: '/forgot-password/',
        templateUrl: 'templates/forgot-password.html',
        controller: 'RecoveryController'
    }).state('forgot-password-token', {
        url: '/forgot-password/:token',
        templateUrl: 'templates/forgot-password-token.html',
        controller: 'RecoveryNewPasswordController'
    }).state('recipes', {
        url: '/recipes/',
        templateUrl: 'templates/recipes.html',
        controller: 'RecipeController'
    }).state('recipeView', {
        url: '/recipes/recipe/:recipeId/',
        templateUrl: 'templates/recipe.html',
        controller: 'RecipeViewController'
    }).state('recipeStream', {
        url: '/recipes/recipeStream/',
        templateUrl: 'templates/recipe-stream.html',
        controller: 'RecipeStreamController'
    });
}]);

},{"./bootstrap":4}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function AuthService($http, $localStorage, $sessionStorage, $mdDialog) {
    var currentUser = undefined;
    var modalIsOpen = false;
    var modal = undefined;

    return {
        register: function register(email, password) {
            return $http.post('http://api.kitchen.support/accounts/create', {
                email: email,
                password: password
            });
        },
        login: function login(args) {
            if (args.email && args.email.length > 0 && (args.password && args.password.length > 0)) {
                return $http.post('http://api.kitchen.support/accounts/login', {
                    email: args.email,
                    password: args.password
                }).then(function (response) {
                    currentUser = response.data;

                    // Store user info in cookies.
                    if (args.remember) {
                        $localStorage.ksLoginToken = response.data.api_token;
                    } else {
                        $sessionStorage.ksLoginToken = response.data.api_token;
                    }
                });
            } else if (args.api_token && args.api_token.length > 0) {
                return $http.get('http://api.kitchen.support/account?api_token=' + args.api_token).then(function (response) {
                    currentUser = response.data;

                    // Store user info in cookies.
                    if (args.remember) {
                        $localStorage.ksLoginToken = response.data.api_token;
                    } else {
                        $sessionStorage.ksLoginToken = response.data.api_token;
                    }
                });
            }
        },
        logout: function logout() {
            currentUser = undefined;
            delete $localStorage.ksLoginToken;
            delete $sessionStorage.ksLoginToken;
        },
        forgotPassword: function forgotPassword(email) {
            return $http.post('http://api.kitchen.support/accounts/reset/request', {
                email: email
            });
        },
        forgotPasswordConfirm: function forgotPasswordConfirm(resetToken, password) {
            return $http.post('http://api.kitchen.support/accounts/reset/confirm', {
                reset_token: resetToken,
                password: password
            });
        },
        getCurrentUser: function getCurrentUser() {
            return currentUser;
        },
        getApiToken: function getApiToken() {
            if (currentUser) {
                return currentUser.api_token;
            }

            return '';
        },

        // login modal functions
        loginModal: {
            open: function open($event) {
                modalIsOpen = true;
                $mdDialog.show({
                    templateUrl: 'templates/login-modal.html',
                    controller: 'LoginController',
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    onRemoving: function onRemoving() {
                        modalIsOpen = false;
                    }
                });
            },
            close: function close() {
                if (modalIsOpen) {
                    $mdDialog.hide(modal);
                }
            },
            getModal: function getModal() {
                return modal;
            },
            isOpen: function isOpen() {
                return modalIsOpen;
            }
        }
    };
}

exports['default'] = ['$http', '$localStorage', '$sessionStorage', '$mdDialog', AuthService];
module.exports = exports['default'];

},{}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function parseIngredients(promise) {
    return promise.then(function (response) {

        var request = response.config.url.split('?')[1].split('&');

        var params = {};

        request.forEach(function (param) {
            var paramData = param.split('=');

            params[paramData[0]] = paramData[1];
        });

        response.data.params = params;
        if (params.offset && params.limit) {
            response.data.range = params.offset + ' - ' + (+params.offset + +params.limit);
        }

        return response;
    });
}

function RecipeService($http, $q, AuthService) {
    return {
        getSearch: function getSearch(params) {
            var searchTerm = params.searchTerm;
            var _params$limit = params.limit;
            var limit = _params$limit === undefined ? 28 : _params$limit;
            var _params$offset = params.offset;
            var offset = _params$offset === undefined ? 0 : _params$offset;

            var token = AuthService.getApiToken();

            if (token) {
                return $http.get('http://api.kitchen.support/ingredients/' + searchTerm + '?limit=' + limit + '&offset=' + offset + '&api_token=' + token);
            } else {
                return $http.get('http://api.kitchen.support/ingredients/' + searchTerm + '?limit=' + limit + '&offset=' + offset);
            }
        },
        getIngredients: function getIngredients() {
            var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var _params$limit2 = params.limit;
            var limit = _params$limit2 === undefined ? 30 : _params$limit2;
            var _params$offset2 = params.offset;
            var offset = _params$offset2 === undefined ? 0 : _params$offset2;

            return parseIngredients($http.get('http://api.kitchen.support/ingredients?limit=' + limit + '&offset=' + offset));
        },
        getPantry: function getPantry() {
            var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var _params$limit3 = params.limit;
            var limit = _params$limit3 === undefined ? 30 : _params$limit3;
            var _params$offset3 = params.offset;
            var offset = _params$offset3 === undefined ? 0 : _params$offset3;

            return parseIngredients($http.get('http://api.kitchen.support/pantry?api_token=' + AuthService.getApiToken() + '&limit=' + limit + '&offset=' + offset));
        },
        addPantry: function addPantry(ingredientId) {
            return $http.post('http://api.kitchen.support/pantry', { api_token: AuthService.getApiToken(), ingredient_id: ingredientId });
        },
        removePantry: function removePantry(ingredientId) {
            return $http.post('http://api.kitchen.support/pantry', { api_token: AuthService.getApiToken(), ingredient_id: ingredientId, value: false });
        }
    };
}

exports['default'] = ['$http', '$q', 'AuthService', RecipeService];
module.exports = exports['default'];

},{}],28:[function(require,module,exports){

// Parse an array of recipes.
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function parseRecipeArray(promise) {
    return promise.then(function (response) {
        response.data.recipes = response.data.recipes || response.data.likes || {};
        if (response && response.status === 200) {
            if (response.data.recipes && response.data.recipes.length > 0) {
                response.data.recipes.forEach(function (part, recipe, recipes) {
                    recipes[recipe].url = 'recipeView({\'recipeId\': \'' + recipes[recipe].yummly_id + '\'})';

                    if (recipes[recipe].totalTimeInSeconds && recipes[recipe].totalTimeInSeconds > 1) {
                        recipes[recipe].totalTimeString = recipes[recipe].totalTimeInSeconds / 60 + ' minutes';
                    }

                    recipes[recipe].ratingArray = [];

                    // TODO: 'no recipe found' image.
                    if (recipes[recipe].smallImageUrls && recipes[recipe].smallImageUrls.length > 0) {
                        recipes[recipe].imageUrl = recipes[recipe].smallImageUrls[0].split('=')[0] + '=s360';
                    }
                    for (var i = 0; i < recipes[recipe].rating; i++) {
                        recipes[recipe].ratingArray.push(true);
                    }
                    for (var i = recipes[recipe].rating; i < 5; i++) {
                        recipes[recipe].ratingArray.push(false);
                    }
                });
            }
        }

        return response;
    });
}

// Parse an individual recipe.
function parseRecipe(promise) {
    return promise.then(function (response) {
        if (response.data.totalTimeInSeconds && response.data.totalTimeInSeconds > 1) {
            response.data.totalTimeString = response.data.totalTimeInSeconds / 60 + ' minutes';
        }
        response.data.ratingArray = [];
        for (var i = 0; i < response.data.rating; i++) {
            response.data.ratingArray.push(true);
        }
        for (var i = response.data.rating; i < 5; i++) {
            response.data.ratingArray.push(false);
        }

        response.data.imageUrl = response.data.imageUrlsBySize[Object.keys(response.data.imageUrlsBySize)[0]].split('=')[0] + '=s750';
        return response;
    });
}

function RecipeService($http, $q, AuthService) {
    return {
        getRecipeStream: function getRecipeStream() {
            return parseRecipeArray($http.get('http://api.kitchen.support/stream'));
        },
        getSearch: function getSearch(params) {
            var searchTerm = params.searchTerm;
            var _params$limit = params.limit;
            var limit = _params$limit === undefined ? 28 : _params$limit;
            var _params$offset = params.offset;
            var offset = _params$offset === undefined ? 0 : _params$offset;

            var token = AuthService.getApiToken();

            if (token) {
                return parseRecipeArray($http.get('http://api.kitchen.support/recipes/search/' + searchTerm + '?limit=' + limit + '&offset=' + offset + '&api_token=' + token));
            } else {
                return parseRecipeArray($http.get('http://api.kitchen.support/recipes/search/' + searchTerm + '?limit=' + limit + '&offset=' + offset));
            }
        },
        getRecipe: function getRecipe(recipeId) {
            var token = AuthService.getApiToken();

            if (token) {
                return parseRecipe($http.get('http://api.kitchen.support/recipe?yummly_id=' + recipeId + '&api_token=' + token));
            } else {
                return parseRecipe($http.get('http://api.kitchen.support/recipe?yummly_id=' + recipeId));
            }
        },
        favoriteRecipe: function favoriteRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/favorites', { api_token: AuthService.getApiToken(), recipe_id: recipeId });
        },
        unFavoriteRecipe: function unFavoriteRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/favorites', { api_token: AuthService.getApiToken(), recipe_id: recipeId, value: false });
        },
        likeRecipe: function likeRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/likes', { api_token: AuthService.getApiToken(), recipe_id: recipeId });
        },
        completeRecipe: function completeRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/completed', { api_token: AuthService.getApiToken(), recipe_id: recipeId });
        },
        unLikeRecipe: function unLikeRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/likes', { api_token: AuthService.getApiToken(), recipe_id: recipeId, value: false });
        },
        unCompleteRecipe: function unCompleteRecipe(recipeId) {
            return $http.post('http://api.kitchen.support/completed', { api_token: AuthService.getApiToken(), recipe_id: recipeId, value: false });
        },
        getLiked: function getLiked() {
            return parseRecipeArray($http.get('http://api.kitchen.support/likes?api_token=' + AuthService.getApiToken()));
        },
        getFavorited: function getFavorited() {
            return parseRecipeArray($http.get('http://api.kitchen.support/favorites?api_token=' + AuthService.getApiToken()));
        },
        getCompleted: function getCompleted() {
            return parseRecipeArray($http.get('http://api.kitchen.support/completed?api_token=' + AuthService.getApiToken()));
        },
        getRecipeStream: function getRecipeStream() {
            return parseRecipeArray($http.get('http://api.kitchen.support/stream?api_token=' + AuthService.getApiToken()));
        }
    };
}

exports['default'] = ['$http', '$q', 'AuthService', RecipeService];
module.exports = exports['default'];

},{}],29:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _bootstrap = require('../bootstrap');

var _AuthService = require('./AuthService');

var _AuthService2 = _interopRequireDefault(_AuthService);

var _RecipeService = require('./RecipeService');

var _RecipeService2 = _interopRequireDefault(_RecipeService);

var _IngredientService = require('./IngredientService');

var _IngredientService2 = _interopRequireDefault(_IngredientService);

_bootstrap.app.factory('AuthService', _AuthService2['default']);
_bootstrap.app.factory('RecipeService', _RecipeService2['default']);
_bootstrap.app.factory('IngredientService', _IngredientService2['default']);

},{"../bootstrap":4,"./AuthService":26,"./IngredientService":27,"./RecipeService":28}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var appName = 'ksapp';
exports.appName = appName;

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
